Tools for Real-Time Green's Functions
==============================================

:attr:`rtgf.py`: Calculate the Density of States (DOS) values during a time propagation.
                 It makes the trace of time-dependent Green's Functions calculated 
                 along a time propagation and return the DOS values as a function of time both for the real and for the imaginary part of the Green's Function.  

                     **Example**::

                       from PYQCTools.RT_GF import rtgf           

                       rtgf.run(prop_time, time_step, scratch)

                     :attr:`prop_time`: double value of the full propagation time (period), :attr:`time_step`: double value of the time-step, 
                     :attr:`scratch`: directory containing text files of the real (green.$t.$t.txt) and imaginary (green.30000+$t.30000+$t.txt) Green's Functions, where $t indicate the specific time-step. 

                 The script save two output files, :attr:`rt_real.txt` and :attr:`rt_imag.txt`, containing the real and imaginary part of the time-dependent DOS respectively. 

:attr:`fft.py`:  Perform the fourier transform of the time-dependent Density of States (DOS).
                 It reads the :attr:`rt_real.txt` and :attr:`rt_imag.txt` generated by the :attr:`rtgf.py` script and produces the :attr:`ldos.out` and :attr:`real_part.txt` files containing the imaginary and real parts of the `\omega`-dependent DOS respectively.

                     **Example**::

                       from PYQCTools.RT_GF import fft           

                       fft.run(broad, rem_add)

                     :attr:`broad`: double value of the imaginary broadening,
                     :attr:`rem_add`: string specifying if we are working with the addition or removal part of the Green's Function. It can assume only the values 'add' or 'rem'.

:attr:`rt1rdm_builder.py`: Build the Real and Imaginary parts of a Real-Time 1RDM at every time step starting from DMRG data calculated by the Block Code. 
                 It opportunely combines the 1RDM components read from files :attr:`onepdm.$t.$t.txt` where :attr:`$t` is of the order of 1,2,3,..., 100001,10002,100003,... and 200001,200002,200003,... for the Real-Real, Imag-Real and Imag-Imag respectively. 

                     **Example**::

                       from PYQCTools.RT_GF import rt1rdm_builder           

                       rt1rdm_builder.run(prop_time, time_step, scratch)

                     :attr:`prop_time`: double value of the full propagation time (period), :attr:`time_step`: double value of the time-step,
                     :attr:`scratch`: directory containing text files of the 1RDM components at every time-step.

:attr:`extrapolation.py`: Perform linear prediction to extend the total propagation time of a time propagation.
                          It reads N points of time-dependent DOS inside the files :attr:`rt_real.txt` and :attr:`rt_imag.txt` and use the last N/2 data to predict the following N points.

                     **Example**::

                       from PYQCTools.RT_GF import extrapolation          

                       extrapolation.run(full_range)

                     :attr:`full_range`: boolean variable. If it is true is return the full range of calculated and predicted values, if it is false it returns only the predicted values.

                 The script produces :attr:`new_full_data.out` files if full_range = true otherwise it produces :attr:`predicted.out` output files.

:attr:`iter_extrapolation.py`: Perform an interative linear prediction to extend the total propagation time of a time propagation.
                               It reads 4 points of the time-dependent DOS inside the files :attr:`rt_real.txt` and :attr:`rt_imag.txt` and use the last 2 of them to predict the following N points.

                     **Example**::

                       from PYQCTools.RT_GF import iter_extrapolation          

                       iter_extrapolation.run(N)

                     :attr:`N`: integer variable specifying the total number of points that need to be predicted.

                 The script produces :attr:`new_full_real.out` and :attr:`new_full_imag.out` output files with the real and imaginary parts of the exteded time-dependent DOS respectively.
